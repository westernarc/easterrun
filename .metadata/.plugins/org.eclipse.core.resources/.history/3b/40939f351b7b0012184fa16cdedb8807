package com.westernarc.easterrun;

import java.util.ArrayList;
import java.util.Iterator;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.PerspectiveCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.graphics.g3d.model.still.StillModel;
import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
import com.westernarc.easterrun.Actors.Actor;
import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
import com.badlogic.gdx.graphics.g3d.materials.Material;
import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;

public class EasterRun implements ApplicationListener {
	float screenWidth;
	float screenHeight;
	float tpf;
	
	final float horizontalMax = 7.3f;
	final float horizontalMin = -6;
	
	private OrthographicCamera uiCamera;
	private PerspectiveCamera gameCamera;
	private SpriteBatch uiBatch;
	
	final int groundMax = 3;
	final int groundLength = 87;
	Actor[] actGround;
	final float groundBaseRate = 40;
	float groundRate;
	
	Actor actPlayer;
	
	final int eggMax = 1;
	Actor[] actEggs;
	ArrayList<Actor> eggs;
	final float eggBaseRate = 1; 
	float eggRate;
	float eggTimer;
	
	float gameTimer;
	float gameScore;
	
	//Flags
	boolean titleDone = false;
	
	
	public void initialize() {
		groundRate = groundBaseRate;
		
		eggRate = eggBaseRate;
		eggTimer = 0;
		eggs = new ArrayList<Actor>();
		
		gameTimer = 0;
		gameScore = 0;
	}
	
	@Override
	public void create() {		
		screenWidth = Gdx.graphics.getWidth();
		screenHeight = Gdx.graphics.getHeight();
		
		//Set up cameras
		uiCamera = new OrthographicCamera(screenWidth, screenHeight);
		gameCamera = new PerspectiveCamera(85, screenWidth, screenHeight);
		gameCamera.near = 0.1f;
		gameCamera.far = 1000;
		gameCamera.position.set(0,30,0);
		gameCamera.lookAt(-20, 0, 0);
		
		uiBatch = new SpriteBatch();

		Texture txrEnvTex = new Texture(Gdx.files.internal("textures/grass.png"));
		Material matEnvMat = new Material("mat", new TextureAttribute(txrEnvTex, 0, "s_tex"), new ColorAttribute(Color.WHITE, ColorAttribute.diffuse));
		
		//Load models
		//Load ground
		actGround = new Actor[groundMax];
		for(int i = 0; i < groundMax; i++) {
			actGround[i] = new Actor();
			if(i > 1) {
				actGround[i].model = actGround[i-1].model;
			} else {
				actGround[i].model = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("models/ground.g3dt"));
			}
			actGround[i].texture = txrEnvTex;
			actGround[i].material = matEnvMat;
			actGround[i].model.setMaterial(matEnvMat);
			actGround[i].move((i-1) * -87, 0, 0);
		}
		
		//Load player
		actPlayer = new Actor();
		actPlayer.model = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("models/player.g3dt"));
		actPlayer.texture = new Texture(Gdx.files.internal("textures/youmu.png"));
		actPlayer.material = new Material("mat", new TextureAttribute(actPlayer.texture, 0, "s_tex"), new ColorAttribute(Color.WHITE, ColorAttribute.diffuse));
		actPlayer.model.setMaterial(actPlayer.material);
		
		
		//Load eggs
		actEggs = new Actor[eggMax];
		for(int i = 1; i <= eggMax; i++) {
			actEggs[i - 1] = new Actor();
			actEggs[i - 1].model = ModelLoaderRegistry.loadStillModel(Gdx.files.internal("models/egg" + i + ".g3dt"));
			actEggs[i - 1].texture = txrEnvTex;
			actEggs[i - 1].material = matEnvMat;
			actEggs[i - 1].model.setMaterial(matEnvMat);
		}
		
		//Initialize variables
		initialize();
	}

	@Override
	public void dispose() {
		uiBatch.dispose();
	}

	@Override
	public void render() {		
		Gdx.gl10.glClearColor(0.64f, 0.78f, 0.35f, 1);
		Gdx.gl10.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
		tpf = Gdx.graphics.getDeltaTime();
		
		//uiBatch.setProjectionMatrix(uiCamera.combined);
		//uiBatch.begin();
		//uiBatch.end();
		
		Gdx.gl10.glEnable(GL10.GL_DEPTH_TEST);
		Gdx.gl10.glEnable(GL10.GL_TEXTURE_2D);
		Gdx.gl10.glEnable(GL10.GL_COLOR_MATERIAL);
		
		//Draw models
		gameCamera.update();
		gameCamera.apply(Gdx.gl10);
		
		//Draw ground
		for(int i = 0; i < groundMax; i++) {
			Gdx.gl10.glPushMatrix();
			Gdx.gl10.glTranslatef(actGround[i].position.x, actGround[i].position.y, actGround[i].position.z);
			actGround[i].model.render();
			Gdx.gl10.glPopMatrix();
		}
		
		//Draw player
		Gdx.gl10.glPushMatrix();
		Gdx.gl10.glTranslatef(actPlayer.position.x, actPlayer.position.y, actPlayer.position.z);
		actPlayer.model.render();
		Gdx.gl10.glPopMatrix();
		
		//Draw eggs, update them too
		Iterator<Actor> eggItr = eggs.iterator();
		while(eggItr.hasNext()) {		
			//Draw
			Actor currentEgg = eggItr.next();
			Gdx.gl10.glPushMatrix();
			Gdx.gl10.glTranslatef(currentEgg.position.x, currentEgg.position.y, currentEgg.position.z);
			currentEgg.model.render();
			Gdx.gl10.glPopMatrix();
			
			//Update
			currentEgg.move(groundRate * tpf, 0, 0);
			if(currentEgg.position.x > groundLength * 1.5f) eggItr.remove();
			
			//If the eggs are near the player, do collision detection
			if(currentEgg.position.x > -15 && currentEgg.collidesWith(actPlayer)) {
				eggItr.remove();
				onEggHit();
			}
				
		}
		
		//Update objects
		update(tpf);
				
		//End draw models
		Gdx.gl10.glDisable(GL10.GL_DEPTH_TEST);
		Gdx.gl10.glDisable(GL10.GL_TEXTURE_2D);
	}
	public void update(float tpf) {
		//Update the ground
		for(int i = 0; i < groundMax; i++) {
			actGround[i].move(groundRate * tpf, 0, 0);
			if(actGround[i].position.x > groundLength * 1.5f) {
				actGround[i].move(-groundMax * groundLength, 0, 0);
			}
		}
		
		//Update the player
		//TODO player animation
		
		//Update eggs
		//TO ALLOW THE GAME TO RUN OVER THE EGG LIST ONLY ONCE, THE INDIVIDUAL EGGS
		//ARE UPDATED IN THE RENDER METHOD
		//WE CREATE NEW EGGS HERE
		eggTimer += tpf;
		if(eggTimer > eggRate) {
			eggTimer = 0;
			//TODO Refine egg spawning
			//3 slots
			if(Math.random() > 0.5) { 
				//Create clone of some egg
				Actor newEgg = actEggs[0].clone();
				//Set its position
				newEgg.position.x = -groundLength * 2;
				eggs.add(newEgg);
			}
			if(Math.random() > 0.5) { 
				//Create clone of some egg
				Actor newEgg = actEggs[0].clone();
				//Set its position
				newEgg.position.x = -groundLength * 2;
				newEgg.position.z = 6;
				eggs.add(newEgg);
			}
			if(Math.random() > 0.5) { 
				//Create clone of some egg
				Actor newEgg = actEggs[0].clone();
				//Set its position
				newEgg.position.x = -groundLength * 2;
				newEgg.position.z = -6;
				eggs.add(newEgg);
			}
		}
		
		//Handle Input
		if(Gdx.input.isTouched())
			handleTouch();
	}
	@Override
	public void resize(int width, int height) {
	}

	@Override
	public void pause() {
	}

	@Override
	public void resume() {
	}
	
	public void handleTouch() {
		float x = Gdx.input.getX() - screenWidth / 2f;
		float y = Gdx.input.getY() - screenHeight / 2f;
		
		float dX = Gdx.input.getDeltaX();
		actPlayer.position.z += -dX / 16f;
		if(actPlayer.position.z > horizontalMax)actPlayer.position.z = horizontalMax;
		else if(actPlayer.position.z < horizontalMin)actPlayer.position.z = horizontalMin;
	}
	
	public void onEggHit() {
		//TODO Hitting eggs does nothing
	}
}
